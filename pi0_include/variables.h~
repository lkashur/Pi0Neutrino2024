/**
 * @file variables.h
 * @brief Header file for definitions of selection variables.
 * @author justin.mueller@colostate.edu
*/
#ifndef VARIABLES_H
#define VARIABLES_H

#include <algorithm>
#include <TVector3.h>

namespace vars
{




  /**
   *
   *
   *
   *
   *
   */
  template<class T>
    double category_topology(const T & interaction)
    {
      uint16_t cat(4);
      if(interaction.is_neutrino)
	{
	  int primary_muon_count = 0;
	  int primary_pi0_count = 0;
	  int cex_pi0_count = 0;
	  vector<int> primary_pi0_track_ids;
	  vector<int> cex_pi0_track_ids;
	  for(auto &p : interaction.particles)
	    {
	      // Muon count
	      if(p.pid == 2 && p.is_primary)
		{
		  primary_muon_count++;
		}

	      // Collect primary pi0 photons
	      if(p.pdg_code == 22 && p.is_primary && p.ancestor_pdg_code == 111)
		{
		  primary_pi0_track_ids.push_back(p.ancestor_track_id);
		}

	      // Collect cex pi0 photon
	      if(p.pdg_code == 22 && !p.is_primary && abs(p.ancestor_pdg_code) == 211)
		{                                                                                                                                    
		  cex_pi0_track_ids.push_back(p.ancestor_track_id);
		}
	    }

	  // Count duplicate ancestor IDs to find number of primary pi0s
	  map<int, int> primary_pi0_frequency;
	  for(int i : primary_pi0_track_ids)
	    {
	      primary_pi0_frequency[i]++;
	    }
	  primary_pi0_count = count_if(primary_pi0_frequency.begin(), primary_pi0_frequency.end(),
				       [](auto const &d) { return d.second >= 2; });


	  // Count duplicate ancestor IDs to find number of Cex pi0s
	  map<int, int> cex_pi0_frequency;
	  for(int i : cex_pi0_track_ids)
	    {
	      cex_pi0_frequency[i]++;
	    }
	  cex_pi0_count = count_if(cex_pi0_frequency.begin(), cex_pi0_frequency.end(),
				   [](auto const &d) { return d.second >= 2; });

	  if(primary_muon_count == 1 && primary_pi0_count == 1 && cex_pi0_count == 0 && interaction.nu_current_type == 0 && interaction.is_contained && interaction.is_fiducial) cat = 0;
	  else if(primary_muon_count == 1 && primary_pi0_count > 1 && cex_pi0_count == 0 && interaction.nu_current_type == 0) cat = 1;
	  else if(primary_muon_count == 1 && cex_pi0_count >= 1 && interaction.nu_current_type == 0) cat = 2;
	  else if(interaction.nu_current_type == 1) cat = 3;
	  else cat = 5;
	}

      return cat;
    }




  /**
   * Variable for finding candidate pi0 photons.
   * @tparam T the type of interaction (true or reco).
   * @param interaction to apply the variable on.
   * @return vector of pairs where first element corresponds
   * to shower indices and second element corresponds to
   * angular agreement between showers.
   */
  template<class T>
    vector<pair<pair<int, int>, float>> pi0_photon_candidates(const T & interaction)
    {
      // Output storage
      vector<pair< pair<int, int>, float> > photons;
      for(auto & p : interaction.particles)
	{
	  // primary photons only
	  if (p.pid != 0 || !p.is_primary) continue;

	  TVector3 sh0_start(p.start_point[0], p.start_point[1], p.start_point[2]);
	  TVector3 sh0_dir(p.start_dir[0], p.start_dir[1], p.start_dir[2]);

	  // Loop through particles, again
	  for(auto & q : interaction.particles)
	    {
	      // (but don't loop through first particle again)
	      if (p.id == q.id) continue;

	      // Primary photons
	      if (q.pid != 0 || !q.is_primary) continue;

	      TVector3 sh1_start(q.start_point[0], q.start_point[1], q.start_point[2]);
	      TVector3 sh1_dir(q.start_dir[0], q.start_dir[1], q.start_dir[2]);

	      // Find "vertex" for each photon pair
	      TVector3 c0;
	      TVector3 c1;
	      TVector3 n = sh0_dir.Cross(sh1_dir);
	      TVector3 n0 = sh0_dir.Cross(n);
	      TVector3 n1 = sh1_dir.Cross(n);
	      float s0 = (sh1_start - sh0_start).Dot(n1) / sh0_dir.Dot(n1);
	      float s1 = (sh0_start - sh1_start).Dot(n0) / sh1_dir.Dot(n0);

	      if (s0 > 0 && s1 > 0)
		{
		  c0 = sh0_start;
		  c1 = sh1_start;
		}
	      else if (s0 > 0 && s1 < 0)
		{
		  c0 = sh0_start;
		  c1 = sh0_start;
		}
	      else if (s1 < 0 && s1 > 0)
		{
		  c0 = sh1_start;
		  c1 = sh1_start;
		}
	      else
		{
		  c0 = sh0_start + s0*sh0_dir;
		  c1 = sh1_start + s1*sh1_dir;
		}

	      float d0 = (sh0_start - c0).Mag();
	      float d1 = (sh1_start - c1).Mag();

	      TVector3 vertex;
	      if (d0 == 0 || d1 == 0)
		{
		  float vertex_x = (c0[0] + c1[0]) / 2;
		  float vertex_y = (c0[1] + c1[1]) / 2;
		  float vertex_z = (c0[2] + c1[2]) / 2;
		  vertex.SetX(vertex_x);
		  vertex.SetY(vertex_y);
		  vertex.SetZ(vertex_z);
		}
	      else
		{
		  float vertex_x = ((c0[0] * d1) + (c1[0] * d0)) / (d1 + d0);
		  float vertex_y = ((c0[1] * d1) + (c1[1] * d0)) / (d1 + d0);
		  float vertex_z = ((c0[2] * d1) + (c1[2] * d0)) / (d1 + d0);
		  vertex.SetX(vertex_x);
		  vertex.SetY(vertex_y);
		  vertex.SetZ(vertex_z);
		}	      
	      
	      // Find mean angular displacement between
	      // <sh_start from vertex> and <sh_dir>
	      float r0 = (sh0_start - vertex).Mag();
	      float r1 = (sh1_start - vertex).Mag();
	      float angle = 0;
	      if (r0 > 0)
		{
		  TVector3 v0 = (sh0_start - vertex).Unit();
		  angle += acos( sh0_dir.Dot(v0) )/2;
		}
	      if (r1 > 0)
		{
		  TVector3 v1 = (sh1_start - vertex).Unit();
		  angle += acos( sh1_dir.Dot(v1) )/2;
		}

	      photons.push_back(make_pair(make_pair(p.id, q.id), angle));
	      sort(photons.begin(), photons.end(), [](const pair<pair<int, int>, float> &a, const pair<pair<int, int>, float> &b)
		   { return a.second < b.second;});	      

	    } // end inner particle loop
	} // end outer particle loop

      return photons;
    }

  
  
  /**
   * Variable for finding candidate pi0 mass.
   * @tparam T the type of interaction (true or reco).
   * @param interaction to apply the variable on.
   * @return the invariant pi0 mass.
   */    
  template<class T>
    double pi0_mass(const T & interaction)
    {

      // Get interaction vertex
      TVector3 int_vertex(interaction.vertex[0], interaction.vertex[1], interaction.vertex[2]);

      // Get photon pairs in interaction
      // (and their respective angular agreement)
      vector<pair< pair<int, int>, float> > photons = pi0_photon_candidates(interaction);
      
      pair<int, int> ph_pair_ids = photons[0].first;
      float sel_aa = photons[0].second;
      double photon0_energy;
      TVector3 photon0_dir;
      double photon1_energy;
      TVector3 photon1_dir;
      
      for(auto & p : interaction.particles)
	{
	  if (p.id == ph_pair_ids.first)
	    {
	      photon0_energy = p.calo_ke;
	      photon0_dir.SetX(p.start_point[0] - int_vertex[0]);
	      photon0_dir.SetY(p.start_point[1] - int_vertex[1]);
	      photon0_dir.SetZ(p.start_point[2] - int_vertex[2]);
	      photon0_dir = photon0_dir.Unit();
	    }
	  else if (p.id == ph_pair_ids.second)
	    {
	      photon1_energy = p.calo_ke;
	      photon1_dir.SetX(p.start_point[0] - int_vertex[0]);
	      photon1_dir.SetY(p.start_point[1] - int_vertex[1]);
	      photon1_dir.SetZ(p.start_point[2] - int_vertex[2]);
	      photon1_dir = photon1_dir.Unit();
	    }
	  else continue;
	}

      double ph_cos_angle = photon0_dir.Dot(photon1_dir);
      double mass = sqrt(2*photon0_energy*photon1_energy*(1-ph_cos_angle));
      return mass;
    }


    


    

}

#endif
